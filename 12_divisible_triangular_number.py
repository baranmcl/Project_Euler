#The sequence of triangle numbers is generated by adding the natural numbers.
#The sequence of triangle numbers is generated by adding the natural numbers.
#So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:
#1: 1
#3: 1,3
#6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?

#This factor length algorithm is based from the one on Jason's Code Blog.
#http://code.jasonbhill.com/sage/project-euler-problem-12/
#It utilizes the prime number decomposition theorem.
#Every integer N is the product of powers of prime numbers.
def factorLen(n):
    if n % 2 == 0: n = n/2
    factors = 1
    count = 0
    while n % 2 == 0:
        count += 1
        n = n/2
    factors *= (count + 1)
    p = 3
    while n != 1:
        count = 0
        while n % p == 0:
            count += 1
            n = n/p
        factors *= (count + 1)
        p += 2
    return factors

#calculates nth triangular number
def triangleizer(n):
    return (n * (n + 1)) / 2

#returns the nth triangular number with divisor limit.
def triNumFactor(factor_limit):
    n = 1
    lnum, rnum = factorLen(n), factorLen(n+1)
    while lnum*rnum < factor_limit:
        n += 1
        lnum, rnum = rnum, factorLen(n+1)
    return triangleizer(n) , n

if __name__ == '__main__':
    print(triNumFactor(500))
